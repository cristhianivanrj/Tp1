/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mycompany.myapp.dao;

import com.mycompany.myapp.dto.*;
import com.mycompany.myapp.exceptions.*;

public interface ProfessorDao
{
	/** 
	 * Inserts a new row in the professor table.
	 */
	public ProfessorPk insert(Professor dto) throws ProfessorDaoException;

	/** 
	 * Updates a single row in the professor table.
	 */
	public void update(ProfessorPk pk, Professor dto) throws ProfessorDaoException;

	/** 
	 * Deletes a single row in the professor table.
	 */
	public void delete(ProfessorPk pk) throws ProfessorDaoException;

	/** 
	 * Returns the rows from the professor table that matches the specified primary-key value.
	 */
	public Professor findByPrimaryKey(ProfessorPk pk) throws ProfessorDaoException;

	/** 
	 * Returns all rows from the professor table that match the criteria 'idProfessor = :idProfessor'.
	 */
	public Professor findByPrimaryKey(int idProfessor) throws ProfessorDaoException;

	/** 
	 * Returns all rows from the professor table that match the criteria ''.
	 */
	public Professor[] findAll() throws ProfessorDaoException;

	/** 
	 * Returns all rows from the professor table that match the criteria 'idProfessor = :idProfessor'.
	 */
	public Professor[] findWhereIdProfessorEquals(int idProfessor) throws ProfessorDaoException;

	/** 
	 * Returns all rows from the professor table that match the criteria 'Professor = :professor'.
	 */
	public Professor[] findWhereProfessorEquals(String professor) throws ProfessorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the professor table that match the specified arbitrary SQL statement
	 */
	public Professor[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProfessorDaoException;

	/** 
	 * Returns all rows from the professor table that match the specified arbitrary SQL statement
	 */
	public Professor[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProfessorDaoException;

}
