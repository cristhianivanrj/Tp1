/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mycompany.myapp.dao;

import com.mycompany.myapp.dto.*;
import com.mycompany.myapp.exceptions.*;

public interface ProfDiscDao
{
	/** 
	 * Inserts a new row in the prof_disc table.
	 */
	public ProfDiscPk insert(ProfDisc dto) throws ProfDiscDaoException;

	/** 
	 * Updates a single row in the prof_disc table.
	 */
	public void update(ProfDiscPk pk, ProfDisc dto) throws ProfDiscDaoException;

	/** 
	 * Deletes a single row in the prof_disc table.
	 */
	public void delete(ProfDiscPk pk) throws ProfDiscDaoException;

	/** 
	 * Returns the rows from the prof_disc table that matches the specified primary-key value.
	 */
	public ProfDisc findByPrimaryKey(ProfDiscPk pk) throws ProfDiscDaoException;

	/** 
	 * Returns all rows from the prof_disc table that match the criteria 'idProfessor = :idProfessor AND idDisciplina = :idDisciplina'.
	 */
	public ProfDisc findByPrimaryKey(int idProfessor, String idDisciplina) throws ProfDiscDaoException;

	/** 
	 * Returns all rows from the prof_disc table that match the criteria ''.
	 */
	public ProfDisc[] findAll() throws ProfDiscDaoException;

	/** 
	 * Returns all rows from the prof_disc table that match the criteria 'idProfessor = :idProfessor'.
	 */
	public ProfDisc[] findWhereIdProfessorEquals(int idProfessor) throws ProfDiscDaoException;

	/** 
	 * Returns all rows from the prof_disc table that match the criteria 'idDisciplina = :idDisciplina'.
	 */
	public ProfDisc[] findWhereIdDisciplinaEquals(String idDisciplina) throws ProfDiscDaoException;

	/** 
	 * Returns all rows from the prof_disc table that match the criteria 'Livro = :livro'.
	 */
	public ProfDisc[] findWhereLivroEquals(String livro) throws ProfDiscDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the prof_disc table that match the specified arbitrary SQL statement
	 */
	public ProfDisc[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProfDiscDaoException;

	/** 
	 * Returns all rows from the prof_disc table that match the specified arbitrary SQL statement
	 */
	public ProfDisc[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProfDiscDaoException;

}
