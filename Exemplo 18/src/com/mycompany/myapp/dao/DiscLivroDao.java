/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mycompany.myapp.dao;

import com.mycompany.myapp.dto.*;
import com.mycompany.myapp.exceptions.*;

public interface DiscLivroDao
{
	/** 
	 * Inserts a new row in the disc_livro table.
	 */
	public DiscLivroPk insert(DiscLivro dto) throws DiscLivroDaoException;

	/** 
	 * Updates a single row in the disc_livro table.
	 */
	public void update(DiscLivroPk pk, DiscLivro dto) throws DiscLivroDaoException;

	/** 
	 * Deletes a single row in the disc_livro table.
	 */
	public void delete(DiscLivroPk pk) throws DiscLivroDaoException;

	/** 
	 * Returns the rows from the disc_livro table that matches the specified primary-key value.
	 */
	public DiscLivro findByPrimaryKey(DiscLivroPk pk) throws DiscLivroDaoException;

	/** 
	 * Returns all rows from the disc_livro table that match the criteria 'idDisciplina = :idDisciplina'.
	 */
	public DiscLivro findByPrimaryKey(int idDisciplina) throws DiscLivroDaoException;

	/** 
	 * Returns all rows from the disc_livro table that match the criteria ''.
	 */
	public DiscLivro[] findAll() throws DiscLivroDaoException;

	/** 
	 * Returns all rows from the disc_livro table that match the criteria 'idDisciplina = :idDisciplina'.
	 */
	public DiscLivro[] findWhereIdDisciplinaEquals(int idDisciplina) throws DiscLivroDaoException;

	/** 
	 * Returns all rows from the disc_livro table that match the criteria 'Livro = :livro'.
	 */
	public DiscLivro[] findWhereLivroEquals(String livro) throws DiscLivroDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the disc_livro table that match the specified arbitrary SQL statement
	 */
	public DiscLivro[] findByDynamicSelect(String sql, Object[] sqlParams) throws DiscLivroDaoException;

	/** 
	 * Returns all rows from the disc_livro table that match the specified arbitrary SQL statement
	 */
	public DiscLivro[] findByDynamicWhere(String sql, Object[] sqlParams) throws DiscLivroDaoException;

}
