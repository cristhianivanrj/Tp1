/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package main;

import com.mycompany.myapp.dao.*;
import com.mycompany.myapp.factory.*;
import com.mycompany.myapp.exceptions.*;
import java.io.Serializable;
import java.util.*;

public class Pessoa implements Serializable
{
	/** 
	 * This attribute maps to the column id_pessoa in the pessoa table.
	 */
	protected int idPessoa;

	/** 
	 * This attribute maps to the column nome in the pessoa table.
	 */
	protected String nome;

	/** 
	 * This attribute maps to the column sobrenome in the pessoa table.
	 */
	protected String sobrenome;
	/**
	 * Method 'Pessoa'
	 * 
	 */
	public Pessoa()
	{
	}

	/**
	 * Method 'getIdPessoa'
	 * 
	 * @return int
	 */
	public int getIdPessoa()
	{
		return idPessoa;
	}

	/**
	 * Method 'setIdPessoa'
	 * 
	 * @param idPessoa
	 */
	public void setIdPessoa(int idPessoa)
	{
		this.idPessoa = idPessoa;
	}

	/**
	 * Method 'getNome'
	 * 
	 * @return String
	 */
	public String getNome()
	{
		return nome;
	}

	/**
	 * Method 'setNome'
	 * 
	 * @param nome
	 */
	public void setNome(String nome)
	{
		this.nome = nome;
	}

	/**
	 * Method 'getSobrenome'
	 * 
	 * @return String
	 */
	public String getSobrenome()
	{
		return sobrenome;
	}

	/**
	 * Method 'setSobrenome'
	 * 
	 * @param sobrenome
	 */
	public void setSobrenome(String sobrenome)
	{
		this.sobrenome = sobrenome;
	}

	/**
	 * Method 'equals'
	 * O m�todo equals � utilizado para compara��es. 
	 * Busca garantir que dois objetos desses tipos,
	 * com o mesmo conte�do, possam ser considerados iguais.
	 * @param _other
	 * @return boolean
	 */
	
	public boolean equals(Object _other)
	{
		if (_other == null) {
			return false;
		}
		
		if (_other == this) {
			return true;
		}
		
		if (!(_other instanceof Pessoa)) {
			return false;
		}
		
		final Pessoa _cast = (Pessoa) _other;
		if (idPessoa != _cast.idPessoa) {
			return false;
		}
		
		if (nome == null ? _cast.nome != nome : !nome.equals( _cast.nome )) {
			return false;
		}
		
		if (sobrenome == null ? _cast.sobrenome != sobrenome : !sobrenome.equals( _cast.sobrenome )) {
			return false;
		}
		
		return true;
	}

	/**
	 * Method 'hashCode'
	 * M�todo geralmente utilizados para determinar
	 * em qual local, no conjunto, ele deve ser armazenado.
	 * Sendo, posteriormente, utilizado para fazer uma pesquisa dentro do pr�prio conjunto.
	 * @return int
	 */
	public int hashCode()
	{
		int _hashCode = 0;
		_hashCode = 29 * _hashCode + idPessoa;
		if (nome != null) {
			_hashCode = 29 * _hashCode + nome.hashCode();
		}
		
		if (sobrenome != null) {
			_hashCode = 29 * _hashCode + sobrenome.hashCode();
		}
		
		return _hashCode;
	}

	/**
	 * 
	 * Method 'createPk'
	 * @return PessoaPk
	 */
	public PessoaPk createPk()
	{
		return new PessoaPk(idPessoa);
	}

	/**
	 * Method 'toString'
	 * 
	 * @return String
	 */
	public String toString()
	{
		StringBuffer ret = new StringBuffer();
		ret.append( "com.mycompany.myapp.dto.Pessoa: " );
		ret.append( "idPessoa=" + idPessoa );
		ret.append( ", nome=" + nome );
		ret.append( ", sobrenome=" + sobrenome );
		return ret.toString();
	}

}
